// Code generated by MockGen. DO NOT EDIT.
// Source: util.go

// Package facades is a generated GoMock package.
package facades

import (
	reflect "reflect"

	modules "github.com/gari8/fitman/modules"
	gomock "go.uber.org/mock/gomock"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetTokenInfo mocks base method.
func (m *MockApiClient) GetTokenInfo() (modules.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenInfo")
	ret0, _ := ret[0].(modules.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenInfo indicates an expected call of GetTokenInfo.
func (mr *MockApiClientMockRecorder) GetTokenInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenInfo", reflect.TypeOf((*MockApiClient)(nil).GetTokenInfo))
}

// Refresh mocks base method.
func (m *MockApiClient) Refresh() (modules.RefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(modules.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockApiClientMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockApiClient)(nil).Refresh))
}

// MockFSClient is a mock of FSClient interface.
type MockFSClient struct {
	ctrl     *gomock.Controller
	recorder *MockFSClientMockRecorder
}

// MockFSClientMockRecorder is the mock recorder for MockFSClient.
type MockFSClientMockRecorder struct {
	mock *MockFSClient
}

// NewMockFSClient creates a new mock instance.
func NewMockFSClient(ctrl *gomock.Controller) *MockFSClient {
	mock := &MockFSClient{ctrl: ctrl}
	mock.recorder = &MockFSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSClient) EXPECT() *MockFSClientMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockFSClient) Confirm() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm")
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockFSClientMockRecorder) Confirm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockFSClient)(nil).Confirm))
}

// Dialogue mocks base method.
func (m *MockFSClient) Dialogue(override bool) (modules.DialogueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialogue", override)
	ret0, _ := ret[0].(modules.DialogueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dialogue indicates an expected call of Dialogue.
func (mr *MockFSClientMockRecorder) Dialogue(override interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialogue", reflect.TypeOf((*MockFSClient)(nil).Dialogue), override)
}

// ReadConfig mocks base method.
func (m *MockFSClient) ReadConfig() (modules.ConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig")
	ret0, _ := ret[0].(modules.ConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockFSClientMockRecorder) ReadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockFSClient)(nil).ReadConfig))
}

// SetConfig mocks base method.
func (m *MockFSClient) SetConfig(requests []modules.ConfigRequest, override bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", requests, override)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockFSClientMockRecorder) SetConfig(requests, override interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockFSClient)(nil).SetConfig), requests, override)
}
